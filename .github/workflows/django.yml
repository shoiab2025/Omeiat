name: Django CI/CD

on:
  push:
    branches: [OmeiatColumn-Changes, main]
  pull_request:
    branches: [OmeiatColumn-Changes, main]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: omeiat_db
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config default-libmysqlclient-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run migrations
      env:
        SECRET_KEY: omeiatjobportalandfreeapp
        DEBUG: True
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306
        MYSQL_DATABASE: omeiat_db
        MYSQL_USER: root
        MYSQL_PASSWORD: root
        DATABASE_URL: mysql://root:root@localhost:3306/omeiat_db
        DJANGO_SETTINGS_MODULE: omeiat.settings  # CHANGED: lowercase 'omeiat'
        ALLOWED_HOSTS: localhost,127.0.0.1,testserver
      run: |
        python manage.py migrate
        
    - name: Run tests
      env:
        SECRET_KEY: omeiatjobportalandfreeapp
        DEBUG: True
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306
        MYSQL_DATABASE: omeiat_db
        MYSQL_USER: root
        MYSQL_PASSWORD: root
        DATABASE_URL: mysql://root:root@localhost:3306/omeiat_db
        DJANGO_SETTINGS_MODULE: omeiat.settings  # CHANGED: lowercase 'omeiat'
        ALLOWED_HOSTS: localhost,127.0.0.1,testserver
      run: |
        python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        # Create tar with exclusions to avoid "file changed as we read it" error
        tar --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.git' \
            --exclude='.github' \
            -czf deployment-package.tar.gz .
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: django-app
        path: deployment-package.tar.gz
        retention-days: 1
        
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: django-app
        
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || '22' }}
        script: |
          echo "ðŸš€ Starting deployment..."
          
          # Navigate to project directory - use correct case
          cd /var/www/Omeiat
          
          # Create backup of current deployment
          tar --exclude='venv' --exclude='*.tar.gz' --exclude='*.log' --exclude='__pycache__' \
              -czf ../backup-$(date +%Y%m%d-%H%M%S).tar.gz .
          
          # Stop services to prevent file conflicts during extraction
          sudo systemctl stop gunicorn || true
          
          # Extract new deployment package with overwrite
          tar -xzf deployment-package.tar.gz --overwrite
          
          # Activate virtual environment
          source venv/bin/activate
          
          # Install dependencies
          pip install -r requirements.txt
          
          # Run database migrations
          python manage.py migrate
          
          # Collect static files
          python manage.py collectstatic --noinput
          
          # Restart services
          sudo systemctl restart gunicorn
          sudo systemctl reload nginx
          
          # Clean up deployment package
          rm -f deployment-package.tar.gz
          
          echo "âœ… Deployment completed successfully!"